// AI Content Detection Service
// Detects if text was likely generated by AI tools like ChatGPT, Claude, etc.

interface AIDetectionResult {
  isAIGenerated: boolean;
  confidence: number; // 0-100%
  reasons: string[];
  detectedPatterns: string[];
  recommendations: string[];
}

interface AIPattern {
  pattern: RegExp;
  weight: number;
  description: string;
}

// Common AI-generated text patterns
const AI_PATTERNS: AIPattern[] = [
  // ChatGPT common phrases
  {
    pattern: /as an ai (language model|assistant)/gi,
    weight: 100,
    description: "Direct AI self-reference"
  },
  {
    pattern: /i don't have personal (opinions|experiences|feelings)/gi,
    weight: 95,
    description: "AI disclaimer about personal experience"
  },
  {
    pattern: /i (can't|cannot) (browse|access) the internet/gi,
    weight: 90,
    description: "AI limitation statement"
  },
  
  // Common AI transition phrases
  {
    pattern: /it's worth noting that/gi,
    weight: 30,
    description: "Common AI transition phrase"
  },
  {
    pattern: /it's important to (note|remember|understand|consider)/gi,
    weight: 25,
    description: "AI emphasis pattern"
  },
  {
    pattern: /in conclusion,? it's (clear|evident|important)/gi,
    weight: 35,
    description: "AI conclusion pattern"
  },
  
  // Overly formal/structured patterns
  {
    pattern: /firstly,? secondly,? (thirdly|finally)/gi,
    weight: 20,
    description: "Overly structured enumeration"
  },
  {
    pattern: /on one hand.+on the other hand/gi,
    weight: 25,
    description: "Balanced argument structure typical of AI"
  },
  
  // Perfect grammar indicators
  {
    pattern: /\b(furthermore|moreover|additionally|consequently|nevertheless|nonetheless)\b/gi,
    weight: 15,
    description: "Frequent use of formal connectors"
  },
  
  // AI hedging language
  {
    pattern: /it (seems|appears) that/gi,
    weight: 20,
    description: "AI hedging language"
  },
  {
    pattern: /it (could|might|may) be (argued|said|suggested)/gi,
    weight: 25,
    description: "AI uncertainty expressions"
  },
  
  // Repetitive sentence structures
  {
    pattern: /this (is|means|suggests|indicates|demonstrates)/gi,
    weight: 15,
    description: "Repetitive sentence starters"
  }
];

// Common AI knowledge cutoff references
const AI_KNOWLEDGE_PATTERNS = [
  /my (knowledge|training) (was )?cut.?off/gi,
  /as of my last (update|training)/gi,
  /i don't have access to real.?time/gi,
  /my training data (only )?goes (up )?to/gi
];

// Detect AI-generated content
export const detectAIContent = (text: string): AIDetectionResult => {
  if (!text || text.trim().length < 50) {
    return {
      isAIGenerated: false,
      confidence: 0,
      reasons: ["Text too short for analysis"],
      detectedPatterns: [],
      recommendations: []
    };
  }

  const detectedPatterns: string[] = [];
  const reasons: string[] = [];
  let totalScore = 0;
  let patternCount = 0;

  // Check for direct AI patterns
  AI_PATTERNS.forEach(({ pattern, weight, description }) => {
    const matches = text.match(pattern);
    if (matches) {
      matches.forEach(match => {
        detectedPatterns.push(`"${match}" - ${description}`);
        totalScore += weight;
        patternCount++;
      });
    }
  });

  // Check for knowledge cutoff patterns (high confidence indicators)
  AI_KNOWLEDGE_PATTERNS.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      matches.forEach(match => {
        detectedPatterns.push(`"${match}" - AI knowledge limitation reference`);
        totalScore += 90;
        patternCount++;
        reasons.push("Contains direct AI knowledge cutoff references");
      });
    }
  });

  // Analyze sentence structure
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
  const avgSentenceLength = sentences.reduce((sum, s) => sum + s.split(' ').length, 0) / sentences.length;
  
  if (avgSentenceLength > 25) {
    totalScore += 15;
    reasons.push("Unusually long average sentence length");
  }

  // Check for overly perfect grammar (no contractions, perfect punctuation)
  const contractionCount = (text.match(/\b(don't|won't|can't|isn't|aren't|wasn't|weren't|haven't|hasn't|hadn't|wouldn't|couldn't|shouldn't|mustn't)\b/gi) || []).length;
  const wordCount = text.split(/\s+/).length;
  const contractionRatio = contractionCount / wordCount;
  
  if (contractionRatio < 0.005 && wordCount > 100) {
    totalScore += 20;
    reasons.push("Very low use of contractions (unusually formal)");
  }

  // Check for repetitive structure patterns
  const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim().length > 0);
  if (paragraphs.length >= 3) {
    const startPatterns = paragraphs.map(p => {
      const firstSentence = p.split(/[.!?]/)[0];
      return firstSentence.split(' ').slice(0, 3).join(' ').toLowerCase();
    });
    
    const uniqueStarts = new Set(startPatterns);
    if (uniqueStarts.size < paragraphs.length * 0.7) {
      totalScore += 25;
      reasons.push("Repetitive paragraph structure");
    }
  }

  // Calculate confidence based on score and text length
  const baseConfidence = Math.min(totalScore, 100);
  const lengthFactor = Math.min(wordCount / 200, 1); // More confidence with longer text
  const confidence = Math.round(baseConfidence * lengthFactor);

  // Determine if AI generated
  const isAIGenerated = confidence >= 30;

  // Generate recommendations
  const recommendations = generateRecommendations(confidence, reasons);

  return {
    isAIGenerated,
    confidence,
    reasons,
    detectedPatterns,
    recommendations
  };
};

const generateRecommendations = (confidence: number, reasons: string[]): string[] => {
  const recommendations: string[] = [];

  if (confidence >= 70) {
    recommendations.push("High probability of AI generation. Consider rewriting in your own voice.");
    recommendations.push("Add personal experiences and unique perspectives.");
    recommendations.push("Vary sentence structure and use more natural language.");
  } else if (confidence >= 40) {
    recommendations.push("Moderate AI detection. Make the writing more personal and less formal.");
    recommendations.push("Use more contractions and conversational language.");
    recommendations.push("Add specific examples from your own experience.");
  } else if (confidence >= 20) {
    recommendations.push("Some AI-like patterns detected. Consider varying your writing style.");
    recommendations.push("Use more diverse vocabulary and sentence structures.");
  } else {
    recommendations.push("Writing appears to be human-generated.");
    recommendations.push("Continue developing your unique voice and style.");
  }

  return recommendations;
};

// Additional utility functions
export const getAIDetectionSummary = (result: AIDetectionResult): string => {
  if (result.confidence >= 70) {
    return "LIKELY AI-GENERATED";
  } else if (result.confidence >= 40) {
    return "POSSIBLY AI-ASSISTED";
  } else if (result.confidence >= 20) {
    return "MINOR AI PATTERNS";
  } else {
    return "APPEARS HUMAN-WRITTEN";
  }
};

export const getAIDetectionColor = (confidence: number): string => {
  if (confidence >= 70) return "text-red-600 bg-red-50";
  if (confidence >= 40) return "text-orange-600 bg-orange-50";
  if (confidence >= 20) return "text-yellow-600 bg-yellow-50";
  return "text-green-600 bg-green-50";
};
